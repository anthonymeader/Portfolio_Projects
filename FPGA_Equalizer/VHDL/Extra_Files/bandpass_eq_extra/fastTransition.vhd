-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\fastTransition.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fastTransition
-- Source Path: bandpass_eq/fftAnalysisSynthesis/analysis/fftFrameBuffering/fastTransition
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fastTransition IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        fftStartPulseSlow                 :   IN    std_logic;
        passthroughSlow                   :   IN    std_logic;  -- ufix1
        fftStartPulseFast                 :   OUT   std_logic;
        passthroughFast                   :   OUT   std_logic  -- ufix1
        );
END fastTransition;


ARCHITECTURE rtl OF fastTransition IS

  -- Signals
  SIGNAL Upsample_zero                    : std_logic;
  SIGNAL Upsample_muxout                  : std_logic;
  SIGNAL Upsample_bypass_reg              : std_logic;  -- ufix1
  SIGNAL Upsample_bypassout               : std_logic;
  SIGNAL Rate_Transition1_out1            : std_logic;  -- ufix1

BEGIN
  -- The upsample block inserts zeros between samples.
  -- We want the pulse that is only one clock period wide at the 
  -- faster clock rate, so inserting zeros is what we want.
  -- The rate transition block registers and keeps the same 
  -- value.  We want the enable signal to always be enabled, 
  -- so keeping the same value using the unit delay is what we want.
  -- 
  -- Transition Signals to Fast System Clock Rate   We need to be careful whether we are
  -- 1. Inserting zeros 
  -- or 
  -- 2. Keeping the same value

  -- Upsample: Upsample by 2048, Sample offset 0 
  Upsample_zero <= '0';

  
  Upsample_muxout <= fftStartPulseSlow WHEN enb_1_2048_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_1_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_1_1 = '1' ELSE
      Upsample_bypass_reg;

  Rate_Transition1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1 <= passthroughSlow;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_process;


  fftStartPulseFast <= Upsample_bypassout;

  passthroughFast <= Rate_Transition1_out1;

END rtl;

