-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\analysis.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: analysis
-- Source Path: bandpass_eq/fftAnalysisSynthesis/analysis
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY analysis IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        audioIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        passthrough                       :   IN    std_logic;  -- ufix1
        fftData_re                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftData_im                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftValid                          :   OUT   std_logic;
        fftFramePulse                     :   OUT   std_logic;
        passthroughFast                   :   OUT   std_logic  -- ufix1
        );
END analysis;


ARCHITECTURE rtl OF analysis IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT fftFrameBuffering
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          audioIn                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          passthrough                     :   IN    std_logic;  -- ufix1
          fftData                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          fftDataValid                    :   OUT   std_logic;
          startPulseFast                  :   OUT   std_logic;
          passthroughFast                 :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT FFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          dataOut_im                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Signals
  SIGNAL fftFrameBuffering_out1           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL fftValid_1                       : std_logic;
  SIGNAL fftFrameBuffering_out3           : std_logic;
  SIGNAL fftFrameBuffering_out4           : std_logic;  -- ufix1
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL fftValid_2                       : std_logic;
  SIGNAL FFT_out1_re                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FFT_out1_im                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FFT_out2                         : std_logic;

BEGIN
  -- The ready signal is ignored by design
  -- since data won't be sent while FFT
  -- engine is busy.

  u_fftFrameBuffering : fftFrameBuffering
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              audioIn => audioIn,  -- sfix24_En23
              passthrough => passthrough,  -- ufix1
              fftData => fftFrameBuffering_out1,  -- sfix24_En23
              fftDataValid => fftValid_1,
              startPulseFast => fftFrameBuffering_out3,
              passthroughFast => fftFrameBuffering_out4  -- ufix1
              );

  u_FFT : FFT
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => fftFrameBuffering_out1,  -- sfix24_En23
              validIn => fftValid_2,
              dataOut_re => FFT_out1_re,  -- sfix32_En23
              dataOut_im => FFT_out1_im,  -- sfix32_En23
              validOut => FFT_out2
              );

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= fftValid_1;
        delayMatch_reg(1 TO 2) <= delayMatch_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  fftValid_2 <= delayMatch_reg(2);

  fftData_re <= FFT_out1_re;

  fftData_im <= FFT_out1_im;

  fftValid <= FFT_out2;

  fftFramePulse <= fftFrameBuffering_out3;

  passthroughFast <= fftFrameBuffering_out4;

END rtl;

