-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\applyComplexGains.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: applyComplexGains
-- Source Path: bandpass_eq/fftAnalysisSynthesis/frequencyDomainProcessing/applyComplexGains
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY applyComplexGains IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        gain_1                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_2                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_3                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_4                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_5                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        fftData_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftData_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftValid                          :   IN    std_logic;
        fftFramePulse                     :   IN    std_logic;
        volume                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        fftModifiedData_re                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftModifiedData_im                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        fftValidOut                       :   OUT   std_logic;
        fftFramePulseOut                  :   OUT   std_logic
        );
END applyComplexGains;


ARCHITECTURE rtl OF applyComplexGains IS

  -- Component Declarations
  COMPONENT fftFilterCoefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          gain_1                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          gain_2                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          gain_3                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          gain_4                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          gain_5                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          fftValid                        :   IN    std_logic;
          filterCoefficients_re           :   OUT   std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
          filterCoefficients_im           :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
          );
  END COMPONENT;

  -- Signals
  SIGNAL fftData_re_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL fftData_im_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Delay_out1_re                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Delay_out1_im                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL reduced_reg                      : vector_of_signed32(0 TO 5);  -- sfix32 [6]
  SIGNAL Product_C2ReIm_1_C2ReIm_A        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL fftFilterCoefficients_out1_re    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL fftFilterCoefficients_out1_im    : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL fftFilterCoefficients_out1_re_signed : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL fftFilterCoefficients_out1_im_signed : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product1_C2ReIm_C2ReIm_A         : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL volume_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL reduced_reg_1                    : vector_of_unsigned16(0 TO 6);  -- ufix16 [7]
  SIGNAL volume_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product11_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product11_mul_temp               : signed(51 DOWNTO 0);  -- sfix52_En38
  SIGNAL Product11_cast_1                 : signed(50 DOWNTO 0);  -- sfix51_En38
  SIGNAL Product1_Re                      : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product1_Re_1                    : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product_C2ReIm_2_C2ReIm_A        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product_mul_temp                 : signed(66 DOWNTO 0);  -- sfix67_En45
  SIGNAL Product_Re_AC                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product_Re_AC_1                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL reduced_reg_2                    : vector_of_signed32(0 TO 5);  -- sfix32 [6]
  SIGNAL Product_C2ReIm_1_C2ReIm_B        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product1_C2ReIm_C2ReIm_B         : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product12_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product12_mul_temp               : signed(51 DOWNTO 0);  -- sfix52_En38
  SIGNAL Product12_cast_1                 : signed(50 DOWNTO 0);  -- sfix51_En38
  SIGNAL Product1_Im                      : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product1_Im_1                    : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product_C2ReIm_2_C2ReIm_B        : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Product2_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En45
  SIGNAL Product_Re_BD                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product_Re_BD_1                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL mulOutput                        : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product1_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En45
  SIGNAL Product_Im_AD                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product_Im_AD_1                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product3_mul_temp                : signed(66 DOWNTO 0);  -- sfix67_En45
  SIGNAL Product_Im_BC                    : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product_Im_BC_1                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL mulOutput_1                      : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

  ATTRIBUTE multstyle : string;

BEGIN
  -- Output data type is inherited
  -- from the first input.
  -- The frame pulse needs to be delayed 
  -- to complensate for the latency 
  -- of the Filter Coefficent block.
  -- The valid needs to be delayed
  -- to complensate for the latency 
  -- of the Filter Coefficent block.
  -- Data needs to be delayed
  -- to complensate for the latency 
  -- of the Filter Coefficent block.

  u_fftFilterCoefficients : fftFilterCoefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              gain_1 => gain_1,  -- ufix16_En14
              gain_2 => gain_2,  -- ufix16_En14
              gain_3 => gain_3,  -- ufix16_En14
              gain_4 => gain_4,  -- ufix16_En14
              gain_5 => gain_5,  -- ufix16_En14
              fftValid => fftValid,
              filterCoefficients_re => fftFilterCoefficients_out1_re,  -- sfix35_En22
              filterCoefficients_im => fftFilterCoefficients_out1_im  -- sfix35_En22
              );

  fftData_re_signed <= signed(fftData_re);

  fftData_im_signed <= signed(fftData_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_re <= to_signed(0, 32);
      Delay_out1_im <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay_out1_re <= fftData_re_signed;
        Delay_out1_im <= fftData_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Delay_out1_re;
        reduced_reg(1 TO 5) <= reduced_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Product_C2ReIm_1_C2ReIm_A <= reduced_reg(5);

  fftFilterCoefficients_out1_re_signed <= signed(fftFilterCoefficients_out1_re);

  HwModeRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_C2ReIm_A <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_C2ReIm_A <= fftFilterCoefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  volume_unsigned <= unsigned(volume);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_1 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_1(0) <= volume_unsigned;
        reduced_reg_1(1 TO 6) <= reduced_reg_1(0 TO 5);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  volume_1 <= reduced_reg_1(6);

  Product11_cast <= signed(resize(volume_1, 17));
  Product11_mul_temp <= Product1_C2ReIm_C2ReIm_A * Product11_cast;
  Product11_cast_1 <= Product11_mul_temp(50 DOWNTO 0);
  Product1_Re <= Product11_cast_1(50 DOWNTO 16);

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_Re_1 <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_Re_1 <= Product1_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_2_C2ReIm_A <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_A <= Product1_Re_1;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  Product_mul_temp <= Product_C2ReIm_1_C2ReIm_A * Product_C2ReIm_2_C2ReIm_A;
  Product_Re_AC <= Product_mul_temp(53 DOWNTO 22);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_AC_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Re_AC_1 <= Product_Re_AC;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  reduced_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_2 <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_2(0) <= Delay_out1_im;
        reduced_reg_2(1 TO 5) <= reduced_reg_2(0 TO 4);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  Product_C2ReIm_1_C2ReIm_B <= reduced_reg_2(5);

  fftFilterCoefficients_out1_im_signed <= signed(fftFilterCoefficients_out1_im);

  HwModeRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_C2ReIm_B <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_C2ReIm_B <= fftFilterCoefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;


  Product12_cast <= signed(resize(volume_1, 17));
  Product12_mul_temp <= Product1_C2ReIm_C2ReIm_B * Product12_cast;
  Product12_cast_1 <= Product12_mul_temp(50 DOWNTO 0);
  Product1_Im <= Product12_cast_1(50 DOWNTO 16);

  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_Im_1 <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_Im_1 <= Product1_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  reduced_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_2_C2ReIm_B <= to_signed(0, 35);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_C2ReIm_2_C2ReIm_B <= Product1_Im_1;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  Product2_mul_temp <= Product_C2ReIm_1_C2ReIm_B * Product_C2ReIm_2_C2ReIm_B;
  Product_Re_BD <= Product2_mul_temp(53 DOWNTO 22);

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_BD_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Re_BD_1 <= Product_Re_BD;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  mulOutput <= Product_Re_AC_1 - Product_Re_BD_1;

  fftModifiedData_re <= std_logic_vector(mulOutput);

  Product1_mul_temp <= Product_C2ReIm_1_C2ReIm_A * Product_C2ReIm_2_C2ReIm_B;
  Product_Im_AD <= Product1_mul_temp(53 DOWNTO 22);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_AD_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Im_AD_1 <= Product_Im_AD;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Product3_mul_temp <= Product_C2ReIm_1_C2ReIm_B * Product_C2ReIm_2_C2ReIm_A;
  Product_Im_BC <= Product3_mul_temp(53 DOWNTO 22);

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_BC_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Im_BC_1 <= Product_Im_BC;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  mulOutput_1 <= Product_Im_AD_1 + Product_Im_BC_1;

  fftModifiedData_im <= std_logic_vector(mulOutput_1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay1_out1 <= fftValid;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay2_out1 <= fftFramePulse;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  fftValidOut <= Delay1_out1;

  fftFramePulseOut <= Delay2_out1;

END rtl;

