-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\fftFrameBuffering.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fftFrameBuffering
-- Source Path: bandpass_eq/fftAnalysisSynthesis/analysis/fftFrameBuffering
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY fftFrameBuffering IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        audioIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        passthrough                       :   IN    std_logic;  -- ufix1
        fftData                           :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        fftDataValid                      :   OUT   std_logic;
        startPulseFast                    :   OUT   std_logic;
        passthroughFast                   :   OUT   std_logic  -- ufix1
        );
END fftFrameBuffering;


ARCHITECTURE rtl OF fftFrameBuffering IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT addrAoffset
    PORT( counterA                        :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          addrA                           :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT fftPulseGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          counter                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          fftStartPulse                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT fastTransition
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          fftStartPulseSlow               :   IN    std_logic;
          passthroughSlow                 :   IN    std_logic;  -- ufix1
          fftStartPulseFast               :   OUT   std_logic;
          passthroughFast                 :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT addrBgen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          fftStart                        :   IN    std_logic;
          addrB                           :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          windowIndex                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          fftValid                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT DualRateDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          din_A                           :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr_A                          :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we_A                            :   IN    std_logic;
          din_B                           :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr_B                          :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we_B                            :   IN    std_logic;
          doutA                           :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          doutB                           :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Constants
  CONSTANT hanningROM_table_data          : vector_of_unsigned24(0 TO 255) := 
    (to_unsigned(16#000273#, 24), to_unsigned(16#0009CA#, 24), to_unsigned(16#001606#, 24),
     to_unsigned(16#002724#, 24), to_unsigned(16#003D21#, 24), to_unsigned(16#0057FB#, 24),
     to_unsigned(16#0077AC#, 24), to_unsigned(16#009C30#, 24), to_unsigned(16#00C582#, 24),
     to_unsigned(16#00F39B#, 24), to_unsigned(16#012675#, 24), to_unsigned(16#015E06#, 24),
     to_unsigned(16#019A48#, 24), to_unsigned(16#01DB30#, 24), to_unsigned(16#0220B5#, 24),
     to_unsigned(16#026ACC#, 24), to_unsigned(16#02B96A#, 24), to_unsigned(16#030C82#, 24),
     to_unsigned(16#036409#, 24), to_unsigned(16#03BFF0#, 24), to_unsigned(16#04202A#, 24),
     to_unsigned(16#0484A7#, 24), to_unsigned(16#04ED5A#, 24), to_unsigned(16#055A30#, 24),
     to_unsigned(16#05CB1A#, 24), to_unsigned(16#064007#, 24), to_unsigned(16#06B8E4#, 24),
     to_unsigned(16#0735A0#, 24), to_unsigned(16#07B626#, 24), to_unsigned(16#083A64#, 24),
     to_unsigned(16#08C245#, 24), to_unsigned(16#094DB5#, 24), to_unsigned(16#09DC9D#, 24),
     to_unsigned(16#0A6EE9#, 24), to_unsigned(16#0B0481#, 24), to_unsigned(16#0B9D4F#, 24),
     to_unsigned(16#0C393C#, 24), to_unsigned(16#0CD82F#, 24), to_unsigned(16#0D7A11#, 24),
     to_unsigned(16#0E1EC8#, 24), to_unsigned(16#0EC63C#, 24), to_unsigned(16#0F7052#, 24),
     to_unsigned(16#101CF1#, 24), to_unsigned(16#10CBFE#, 24), to_unsigned(16#117D5F#, 24),
     to_unsigned(16#1230F8#, 24), to_unsigned(16#12E6AE#, 24), to_unsigned(16#139E65#, 24),
     to_unsigned(16#145802#, 24), to_unsigned(16#151366#, 24), to_unsigned(16#15D077#, 24),
     to_unsigned(16#168F16#, 24), to_unsigned(16#174F28#, 24), to_unsigned(16#18108D#, 24),
     to_unsigned(16#18D32A#, 24), to_unsigned(16#1996E0#, 24), to_unsigned(16#1A5B90#, 24),
     to_unsigned(16#1B211E#, 24), to_unsigned(16#1BE76B#, 24), to_unsigned(16#1CAE58#, 24),
     to_unsigned(16#1D75C7#, 24), to_unsigned(16#1E3D99#, 24), to_unsigned(16#1F05B1#, 24),
     to_unsigned(16#1FCDEE#, 24), to_unsigned(16#209634#, 24), to_unsigned(16#215E62#, 24),
     to_unsigned(16#22265B#, 24), to_unsigned(16#22EDFF#, 24), to_unsigned(16#23B531#, 24),
     to_unsigned(16#247BD2#, 24), to_unsigned(16#2541C2#, 24), to_unsigned(16#2606E5#, 24),
     to_unsigned(16#26CB1C#, 24), to_unsigned(16#278E49#, 24), to_unsigned(16#28504E#, 24),
     to_unsigned(16#29110D#, 24), to_unsigned(16#29D069#, 24), to_unsigned(16#2A8E45#, 24),
     to_unsigned(16#2B4A83#, 24), to_unsigned(16#2C0507#, 24), to_unsigned(16#2CBDB4#, 24),
     to_unsigned(16#2D746F#, 24), to_unsigned(16#2E291A#, 24), to_unsigned(16#2EDB9A#, 24),
     to_unsigned(16#2F8BD4#, 24), to_unsigned(16#3039AE#, 24), to_unsigned(16#30E50C#, 24),
     to_unsigned(16#318DD4#, 24), to_unsigned(16#3233ED#, 24), to_unsigned(16#32D73C#, 24),
     to_unsigned(16#3377AA#, 24), to_unsigned(16#34151D#, 24), to_unsigned(16#34AF7D#, 24),
     to_unsigned(16#3546B3#, 24), to_unsigned(16#35DAA8#, 24), to_unsigned(16#366B45#, 24),
     to_unsigned(16#36F873#, 24), to_unsigned(16#37821E#, 24), to_unsigned(16#380830#, 24),
     to_unsigned(16#388A95#, 24), to_unsigned(16#390939#, 24), to_unsigned(16#398407#, 24),
     to_unsigned(16#39FAEF#, 24), to_unsigned(16#3A6DDC#, 24), to_unsigned(16#3ADCBF#, 24),
     to_unsigned(16#3B4785#, 24), to_unsigned(16#3BAE1F#, 24), to_unsigned(16#3C107C#, 24),
     to_unsigned(16#3C6E8F#, 24), to_unsigned(16#3CC847#, 24), to_unsigned(16#3D1D98#, 24),
     to_unsigned(16#3D6E75#, 24), to_unsigned(16#3DBAD1#, 24), to_unsigned(16#3E02A0#, 24),
     to_unsigned(16#3E45D8#, 24), to_unsigned(16#3E846E#, 24), to_unsigned(16#3EBE59#, 24),
     to_unsigned(16#3EF390#, 24), to_unsigned(16#3F240A#, 24), to_unsigned(16#3F4FC0#, 24),
     to_unsigned(16#3F76AC#, 24), to_unsigned(16#3F98C8#, 24), to_unsigned(16#3FB60D#, 24),
     to_unsigned(16#3FCE79#, 24), to_unsigned(16#3FE207#, 24), to_unsigned(16#3FF0B4#, 24),
     to_unsigned(16#3FFA7E#, 24), to_unsigned(16#3FFF63#, 24), to_unsigned(16#3FFF63#, 24),
     to_unsigned(16#3FFA7E#, 24), to_unsigned(16#3FF0B4#, 24), to_unsigned(16#3FE207#, 24),
     to_unsigned(16#3FCE79#, 24), to_unsigned(16#3FB60D#, 24), to_unsigned(16#3F98C8#, 24),
     to_unsigned(16#3F76AC#, 24), to_unsigned(16#3F4FC0#, 24), to_unsigned(16#3F240A#, 24),
     to_unsigned(16#3EF390#, 24), to_unsigned(16#3EBE59#, 24), to_unsigned(16#3E846E#, 24),
     to_unsigned(16#3E45D8#, 24), to_unsigned(16#3E02A0#, 24), to_unsigned(16#3DBAD1#, 24),
     to_unsigned(16#3D6E75#, 24), to_unsigned(16#3D1D98#, 24), to_unsigned(16#3CC847#, 24),
     to_unsigned(16#3C6E8F#, 24), to_unsigned(16#3C107C#, 24), to_unsigned(16#3BAE1F#, 24),
     to_unsigned(16#3B4785#, 24), to_unsigned(16#3ADCBF#, 24), to_unsigned(16#3A6DDC#, 24),
     to_unsigned(16#39FAEF#, 24), to_unsigned(16#398407#, 24), to_unsigned(16#390939#, 24),
     to_unsigned(16#388A95#, 24), to_unsigned(16#380830#, 24), to_unsigned(16#37821E#, 24),
     to_unsigned(16#36F873#, 24), to_unsigned(16#366B45#, 24), to_unsigned(16#35DAA8#, 24),
     to_unsigned(16#3546B3#, 24), to_unsigned(16#34AF7D#, 24), to_unsigned(16#34151D#, 24),
     to_unsigned(16#3377AA#, 24), to_unsigned(16#32D73C#, 24), to_unsigned(16#3233ED#, 24),
     to_unsigned(16#318DD4#, 24), to_unsigned(16#30E50C#, 24), to_unsigned(16#3039AE#, 24),
     to_unsigned(16#2F8BD4#, 24), to_unsigned(16#2EDB9A#, 24), to_unsigned(16#2E291A#, 24),
     to_unsigned(16#2D746F#, 24), to_unsigned(16#2CBDB4#, 24), to_unsigned(16#2C0507#, 24),
     to_unsigned(16#2B4A83#, 24), to_unsigned(16#2A8E45#, 24), to_unsigned(16#29D069#, 24),
     to_unsigned(16#29110D#, 24), to_unsigned(16#28504E#, 24), to_unsigned(16#278E49#, 24),
     to_unsigned(16#26CB1C#, 24), to_unsigned(16#2606E5#, 24), to_unsigned(16#2541C2#, 24),
     to_unsigned(16#247BD2#, 24), to_unsigned(16#23B531#, 24), to_unsigned(16#22EDFF#, 24),
     to_unsigned(16#22265B#, 24), to_unsigned(16#215E62#, 24), to_unsigned(16#209634#, 24),
     to_unsigned(16#1FCDEE#, 24), to_unsigned(16#1F05B1#, 24), to_unsigned(16#1E3D99#, 24),
     to_unsigned(16#1D75C7#, 24), to_unsigned(16#1CAE58#, 24), to_unsigned(16#1BE76B#, 24),
     to_unsigned(16#1B211E#, 24), to_unsigned(16#1A5B90#, 24), to_unsigned(16#1996E0#, 24),
     to_unsigned(16#18D32A#, 24), to_unsigned(16#18108D#, 24), to_unsigned(16#174F28#, 24),
     to_unsigned(16#168F16#, 24), to_unsigned(16#15D077#, 24), to_unsigned(16#151366#, 24),
     to_unsigned(16#145802#, 24), to_unsigned(16#139E65#, 24), to_unsigned(16#12E6AE#, 24),
     to_unsigned(16#1230F8#, 24), to_unsigned(16#117D5F#, 24), to_unsigned(16#10CBFE#, 24),
     to_unsigned(16#101CF1#, 24), to_unsigned(16#0F7052#, 24), to_unsigned(16#0EC63C#, 24),
     to_unsigned(16#0E1EC8#, 24), to_unsigned(16#0D7A11#, 24), to_unsigned(16#0CD82F#, 24),
     to_unsigned(16#0C393C#, 24), to_unsigned(16#0B9D4F#, 24), to_unsigned(16#0B0481#, 24),
     to_unsigned(16#0A6EE9#, 24), to_unsigned(16#09DC9D#, 24), to_unsigned(16#094DB5#, 24),
     to_unsigned(16#08C245#, 24), to_unsigned(16#083A64#, 24), to_unsigned(16#07B626#, 24),
     to_unsigned(16#0735A0#, 24), to_unsigned(16#06B8E4#, 24), to_unsigned(16#064007#, 24),
     to_unsigned(16#05CB1A#, 24), to_unsigned(16#055A30#, 24), to_unsigned(16#04ED5A#, 24),
     to_unsigned(16#0484A7#, 24), to_unsigned(16#04202A#, 24), to_unsigned(16#03BFF0#, 24),
     to_unsigned(16#036409#, 24), to_unsigned(16#030C82#, 24), to_unsigned(16#02B96A#, 24),
     to_unsigned(16#026ACC#, 24), to_unsigned(16#0220B5#, 24), to_unsigned(16#01DB30#, 24),
     to_unsigned(16#019A48#, 24), to_unsigned(16#015E06#, 24), to_unsigned(16#012675#, 24),
     to_unsigned(16#00F39B#, 24), to_unsigned(16#00C582#, 24), to_unsigned(16#009C30#, 24),
     to_unsigned(16#0077AC#, 24), to_unsigned(16#0057FB#, 24), to_unsigned(16#003D21#, 24),
     to_unsigned(16#002724#, 24), to_unsigned(16#001606#, 24), to_unsigned(16#0009CA#, 24),
     to_unsigned(16#000273#, 24));  -- ufix24 [256]

  -- Signals
  SIGNAL count_step                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counterA_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL addrAoffset_out1                 : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL Always_Write_A_out1              : std_logic;
  SIGNAL Never_Write_B_out1               : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL fftPulseGen_out1                 : std_logic;
  SIGNAL fastTransition_out1              : std_logic;
  SIGNAL fastTransition_out2              : std_logic;  -- ufix1
  SIGNAL addrBgen_out1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL addrBgen_out2                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL fftValid                         : std_logic;
  SIGNAL Always_Read_B_out1               : std_logic;
  SIGNAL dpRAM_out1                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL dpRAM_out2                       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL dpRAM_out2_signed                : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL HwModeRegister_reg               : vector_of_signed24(0 TO 1);  -- sfix24 [2]
  SIGNAL dpRAM_out2_1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL addrBgen_out2_unsigned           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL hanningROM_index                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL hanningROM_out1                  : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL hanningROM_out1_1                : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24_En22
  SIGNAL hanningROM_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL Product_cast                     : signed(24 DOWNTO 0);  -- sfix25_En22
  SIGNAL Product_mul_temp                 : signed(48 DOWNTO 0);  -- sfix49_En45
  SIGNAL Product_cast_1                   : signed(47 DOWNTO 0);  -- sfix48_En45
  SIGNAL Product_out1                     : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Product_out1_1                   : signed(23 DOWNTO 0);  -- sfix24_En23

BEGIN
  -- When a FFT frame pulse
  -- is received, create addresses for
  -- Port B to stream a data frame
  -- to the FFT engine.
  -- Apply a Hanning Window
  -- before computing the FFT.  
  -- This is done by looking up 
  -- the appropiate Hanning value
  -- and applied to the data while 
  -- the data is streamed to the
  -- FFT engine.
  -- Frame pulses don't start
  -- until there is enough data
  -- in the circular buffer.
  -- The size of Dual Port RAM is specified by the variable 
  -- modelParams.dpram1.addressSize  and is typically twice the FFT size.  
  -- Ports A and B are running at different clock rates.
  -- Circular Buffer 
  -- Port A Address Generator
  -- Port A of Dual Port RAM
  -- 
  -- Data is written to circular buffer at input sample rate.
  -- Write is always enabled.  Port A is never read so output is ignored.
  -- Transition to
  -- Fast System Clock
  -- for FFT Processing 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- 
  -- Port B of Dual Port RAM
  -- 
  -- Data is read from the circular buffer at a higher clock rate.
  -- Read is always enabled.  Port B never writes so input data to port B
  -- is ignored (specified as zero).

  u_addrAoffset : addrAoffset
    PORT MAP( counterA => std_logic_vector(counterA_out1),  -- ufix9
              addrA => addrAoffset_out1  -- ufix9
              );

  u_fftPulseGen : fftPulseGen
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              counter => std_logic_vector(counterA_out1),  -- ufix9
              fftStartPulse => fftPulseGen_out1
              );

  u_fastTransition : fastTransition
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              fftStartPulseSlow => fftPulseGen_out1,
              passthroughSlow => passthrough,  -- ufix1
              fftStartPulseFast => fastTransition_out1,
              passthroughFast => fastTransition_out2  -- ufix1
              );

  u_addrBgen : addrBgen
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              fftStart => fastTransition_out1,
              addrB => addrBgen_out1,  -- ufix9
              windowIndex => addrBgen_out2,  -- ufix9
              fftValid => fftValid
              );

  u_dpRAM : DualRateDualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 24
                 )
    PORT MAP( clk => clk,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              din_A => audioIn,
              addr_A => addrAoffset_out1,
              we_A => Always_Write_A_out1,
              din_B => std_logic_vector(Never_Write_B_out1),
              addr_B => addrBgen_out1,
              we_B => Always_Read_B_out1,
              doutA => dpRAM_out1,
              doutB => dpRAM_out2
              );

  count_step <= to_unsigned(16#001#, 9);

  count <= counterA_out1 + count_step;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  counterA_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counterA_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        counterA_out1 <= count;
      END IF;
    END IF;
  END PROCESS counterA_process;


  Always_Write_A_out1 <= '1';

  Never_Write_B_out1 <= to_signed(16#000000#, 24);

  Always_Read_B_out1 <= '0';

  dpRAM_out2_signed <= signed(dpRAM_out2);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= dpRAM_out2_signed;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  dpRAM_out2_1 <= HwModeRegister_reg(1);

  addrBgen_out2_unsigned <= unsigned(addrBgen_out2);

  
  hanningROM_index <= to_signed(16#000000FF#, 32) WHEN addrBgen_out2_unsigned > to_unsigned(16#000000FF#, 9) ELSE
      signed(resize(addrBgen_out2_unsigned, 32));
  hanningROM_out1 <= hanningROM_table_data(to_integer(hanningROM_index));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_1 <= hanningROM_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hanningROM_out1_2 <= to_unsigned(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_2 <= hanningROM_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_cast <= signed(resize(hanningROM_out1_2, 25));
  Product_mul_temp <= dpRAM_out2_1 * Product_cast;
  Product_cast_1 <= Product_mul_temp(47 DOWNTO 0);
  Product_out1 <= Product_cast_1(45 DOWNTO 22);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  fftData <= std_logic_vector(Product_out1_1);

  fftDataValid <= fftValid;

  startPulseFast <= fastTransition_out1;

  passthroughFast <= fastTransition_out2;

END rtl;

