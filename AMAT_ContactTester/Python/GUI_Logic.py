# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qt_designer.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
#from pyqtgraph import PlotWidget
import pyqtgraph as pg
import numpy as np
import threading
import System_Control_temp as sc


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.data_cycle = []
        self.data_resistance = []
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(2450, 1061)
        font = QtGui.QFont()
        font.setPointSize(8)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(30, 20, 2400, 1011))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.ui_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.ui_layout.setContentsMargins(0, 0, 0, 0)
        self.ui_layout.setObjectName("ui_layout")
        self.text_side_bar_layout = QtWidgets.QVBoxLayout()
        self.text_side_bar_layout.setObjectName("text_side_bar_layout")
        self.test_setup_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.test_setup_label.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.test_setup_label.setFont(font)
        self.test_setup_label.setObjectName("test_setup_label")
        self.text_side_bar_layout.addWidget(self.test_setup_label)
        self.input_layout = QtWidgets.QFormLayout()
        self.input_layout.setObjectName("input_layout")
        self.test_name_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.test_name_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.test_name_label.setFont(font)
        self.test_name_label.setObjectName("test_name_label")
        self.input_layout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.test_name_label)
        self.test_name_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.test_name_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.test_name_input.setFont(font)
        self.test_name_input.setObjectName("test_name_input")
        self.input_layout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.test_name_input)
        self.num_cycles_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.num_cycles_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.num_cycles_label.setFont(font)
        self.num_cycles_label.setObjectName("num_cycles_label")
        self.input_layout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.num_cycles_label)
        self.cycles_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.cycles_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cycles_input.setFont(font)
        self.cycles_input.setObjectName("cycles_input")
        self.input_layout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cycles_input)
        self.freq_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.freq_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.freq_label.setFont(font)
        self.freq_label.setObjectName("freq_label")
        self.input_layout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.freq_label)
        self.freq_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.freq_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.freq_input.setFont(font)
        self.freq_input.setObjectName("freq_input")
        self.input_layout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.freq_input)
        self.current_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.current_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.current_label.setFont(font)
        self.current_label.setObjectName("current_label")
        self.input_layout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.current_label)
        self.current_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.current_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.current_input.setFont(font)
        self.current_input.setObjectName("current_input")
        self.input_layout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.current_input)
        self.current_time_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.current_time_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.current_time_label.setFont(font)
        self.current_time_label.setObjectName("current_time_label")
        self.input_layout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.current_time_label)
        self.current_time_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.current_time_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.current_time_input.setFont(font)
        self.current_time_input.setPlaceholderText("")
        self.current_time_input.setObjectName("current_time_input")
        self.input_layout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.current_time_input)
        self.stroke_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.stroke_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.stroke_label.setFont(font)
        self.stroke_label.setObjectName("stroke_label")
        self.input_layout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.stroke_label)
        self.stroke_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.stroke_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.stroke_input.setFont(font)
        self.stroke_input.setObjectName("stroke_input")
        self.input_layout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.stroke_input)
        self.mount_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.mount_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.mount_label.setFont(font)
        self.mount_label.setObjectName("mount_label")
        self.input_layout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.mount_label)
        self.mount_input = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.mount_input.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.mount_input.setFont(font)
        self.mount_input.setObjectName("mount_input")
        self.input_layout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.mount_input)
        self.text_side_bar_layout.addLayout(self.input_layout)
        self.cycle_data_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.cycle_data_label.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.cycle_data_label.setFont(font)
        self.cycle_data_label.setObjectName("cycle_data_label")
        self.text_side_bar_layout.addWidget(self.cycle_data_label)
        self.cycle_data_layout = QtWidgets.QFormLayout()
        self.cycle_data_layout.setHorizontalSpacing(6)
        self.cycle_data_layout.setVerticalSpacing(15)
        self.cycle_data_layout.setObjectName("cycle_data_layout")
        self.current_cycle_num_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.current_cycle_num_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.current_cycle_num_label.setFont(font)
        self.current_cycle_num_label.setObjectName("current_cycle_num_label")
        self.cycle_data_layout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.current_cycle_num_label)
        self.cycle_num_output = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.cycle_num_output.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.cycle_num_output.setFont(font)
        self.cycle_num_output.setText("")
        self.cycle_num_output.setObjectName("cycle_num_output")
        self.cycle_data_layout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.cycle_num_output)
        self.voltage_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.voltage_label.setMinimumSize(QtCore.QSize(0, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.voltage_label.setFont(font)
        self.voltage_label.setObjectName("voltage_label")
        self.cycle_data_layout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.voltage_label)
        self.voltage_output = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.voltage_output.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.voltage_output.setFont(font)
        self.voltage_output.setText("")
        self.voltage_output.setObjectName("voltage_output")
        self.cycle_data_layout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.voltage_output)
        self.resistance_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.resistance_label.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.resistance_label.setFont(font)
        self.resistance_label.setObjectName("resistance_label")
        self.cycle_data_layout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.resistance_label)
        self.resistance_output = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.resistance_output.setMinimumSize(QtCore.QSize(0, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.resistance_output.setFont(font)
        self.resistance_output.setText("")
        self.resistance_output.setObjectName("resistance_output")
        self.cycle_data_layout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.resistance_output)
        self.text_side_bar_layout.addLayout(self.cycle_data_layout)
        self.start_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.start_button.setMinimumSize(QtCore.QSize(0, 100))
        self.start_button.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.start_button.setSizeIncrement(QtCore.QSize(2, 0))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.start_button.setFont(font)
        self.start_button.setStyleSheet("background-color : green")
        self.start_button.setObjectName("start_button")
        self.text_side_bar_layout.addWidget(self.start_button)
        self.stop_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.stop_button.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.stop_button.setFont(font)
        self.stop_button.setStyleSheet("background-color : red")
        self.stop_button.setObjectName("stop_button")
        self.text_side_bar_layout.addWidget(self.stop_button)
        self.ui_layout.addLayout(self.text_side_bar_layout)
        self.graph_button_layout = QtWidgets.QVBoxLayout()
        self.graph_button_layout.setObjectName("graph_button_layout")
        self.plot_widget = pg.PlotWidget(self.horizontalLayoutWidget)
        self.plot_widget.setMinimumSize(QtCore.QSize(1500, 1000))
        self.plot_widget.setMaximumSize(QtCore.QSize(1501, 1001))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.plot_widget.setFont(font)
        self.plot_widget.setObjectName("plot_widget")
        self.plot_widget.setLabel('left', 'Resistance (Ohm)')
        self.plot_widget.setLabel('bottom', 'Cycle Number')
        self.graph_button_layout.addWidget(self.plot_widget)
        self.ui_layout.addLayout(self.graph_button_layout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2174, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect validation logic for inputs
        self.test_name_input.textChanged.connect(self.validate_inputs)
        self.cycles_input.textChanged.connect(self.validate_inputs)
        self.freq_input.textChanged.connect(self.validate_inputs)
        self.current_input.textChanged.connect(self.validate_inputs)
        self.current_time_input.textChanged.connect(self.validate_inputs)
        self.stroke_input.textChanged.connect(self.validate_inputs)
        self.mount_input.textChanged.connect(self.validate_inputs)


        # Connect START and STOP buttons to corresponding functions
        self.start_button.clicked.connect(self.start_test)
        self.start_button.setEnabled(False)
        self.stop_button.clicked.connect(self.stop_test)
        self.stop_button.setEnabled(False)
        self.resistance_output.setStyleSheet("color : black;")


        # Create Plot
        self.plot_data(100)

    def validate_inputs(self):
        # Initialize the start button to disabled until proven otherwise
        inputs_are_valid = True

        # Validate test_name_input: must not contain spaces and must not be empty
        test_name = self.test_name_input.text()
        if " " in test_name or not test_name:
            #print("Invalid test name: cannot contain spaces or be empty")
            inputs_are_valid = False

        # Validate cycles_input: must be an integer and not empty
        total_cycles = self.cycles_input.text()  # Get the raw input here
        if not total_cycles.isdigit():
            #print("Invalid cycles input: must be an integer")
            inputs_are_valid = False
            total_cycles = None  # Set total_cycles to None since it wasn't valid
        else:
            total_cycles = int(total_cycles)

        # Validate freq_input: must be an integer and less than or equal to total_cycles
        freq = self.freq_input.text()  # Get the raw input here
        if not freq.isdigit():
            #print("Invalid frequency input: must be an integer")
            inputs_are_valid = False
        else:
            freq = int(freq)
            if total_cycles is not None and freq > total_cycles:
                #print("Invalid frequency input: cannot be greater than the number of cycles")
                inputs_are_valid = False

        # Validate current_input: must be an integer and not empty
        current = self.current_input.text()  # Get the raw input here
        if not current.isdigit():
            #print("Invalid current input: must be an integer")
            inputs_are_valid = False

        # Validate current_time_input: must be an integer and not empty
        #current_time = self.current_time_input.text()  # Get the raw input here
        #if not current_time.isdigit():
            #print("Invalid current time input: must be an integer")
        #    inputs_are_valid = False

        # Validate stroke_input: must be an integer and not empty
        stroke = self.stroke_input.text()  # Get the raw input here
        if not stroke.isdigit():
            #print("Invalid stroke input: must be an integer")
            inputs_are_valid = False

        # Validate mount_input: must be an integer and not empty
        mount = self.mount_input.text()
        if not mount.isdigit():
            inputs_are_valid = False

        # Debug output and start button state
        #if inputs_are_valid:
        #    print("All inputs are valid. Enabling the start button.")
        #else:
        #    print("Some inputs are invalid. Disabling the start button.")

        # Set the start button to enabled or disabled based on the result
        self.start_button.setEnabled(inputs_are_valid)

    def start_test(self):
        test_name = self.test_name_input.text()
        total_cycles = int(self.cycles_input.text())
        freq = int(self.freq_input.text())
        current = int(self.current_input.text())
        current_time = float(self.current_time_input.text())
        stroke = int(self.stroke_input.text())
        mount = int(self.mount_input.text())

        # Disable all input fields to prevent changes during the test
        self.test_name_input.setEnabled(False)
        self.cycles_input.setEnabled(False)
        self.freq_input.setEnabled(False)
        self.current_input.setEnabled(False)
        self.current_time_input.setEnabled(False)
        self.stroke_input.setEnabled(False)
        self.mount_input.setEnabled(False)

        # Set up thread-safe stop event
        self.stop_event = threading.Event()

        # Start the test in a separate thread
        self.cycle_thread = threading.Thread(target=sc.cycle, args=(test_name,total_cycles, 0, freq, current, current_time, stroke, mount, self.stop_event))
        self.cycle_thread.start()

        # Disable start button and Enable stop button
        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.data_cycle = [] #AM Reset Array when pressed start
        self.data_resistance = []
        self.plot_widget.clear()
        self.voltage_output.setText(' 0')
        self.cycle_num_output.setText(' 0')
        self.resistance_output.setText(' 0')

        self.retranslateUi(MainWindow)


        # Start UI updates
        self.plot_data(total_cycles)
        if self.stop_event.is_set() == False:
            self.update_ui()
    
    def update_ui(self):
        if self.cycle_thread.is_alive() or not sc.data_queue.empty():
            if not sc.data_queue.empty():    
                data = sc.data_queue.get()
                print(f"Cycle {data['cycle']}, Pressure: {data['pressure']}, Voltage: {data['voltage']}, Resistance: {data['resistance']} Ohms")

                # Update the labels
                if data['resistance'] >= 1:
                    self.resistance_output.setStyleSheet("color : red;")
                    self.resistance_output.setText(str(data['resistance']) + " FAIL")

                else:
                    self.resistance_output.setStyleSheet("color : black;")
                    self.resistance_output.setText(str(data['resistance']))
                    #self.resistance_output.repaint()

                self.voltage_output.setText(str(data['voltage']))
                self.cycle_num_output.setText(str(data['cycle']))
                self.retranslateUi(MainWindow)
                self.data_cycle.append(data['cycle']) # AM add data to array
                self.data_resistance.append(data['resistance'])


                # Clear the plot and re-plot the entire data set
                self.plot_widget.clear()
                self.plot_widget.plot(self.data_cycle, self.data_resistance, pen={'color':'b', 'width':4})
                line = pg.InfiniteLine(pos=1,angle=0,pen={'color':'r', 'width':4})
                self.plot_widget.addItem(line)
        # Schedule the next update
        QtCore.QTimer.singleShot(100, self.update_ui) #AM Smaller delay

    def plot_data(self,total_cycles):
        self.plot_widget.setBackground('w')
        self.plot_widget.setXRange(1,total_cycles)
        self.plot_widget.setYRange(0,2)
        line = pg.InfiniteLine(pos=1,angle=0,pen={'color':'r', 'width':4})
        self.plot_widget.addItem(line)
        self.plot_widget.plot()

    def stop_test(self):
        # Signal the thread to stop the test
        self.stop_event.set()
        self.cycle_thread.join()  # Wait for the thread to finish

        # Re-enable the input fields after the test is stopped
        self.test_name_input.setEnabled(True)
        self.cycles_input.setEnabled(True)
        self.freq_input.setEnabled(True)
        self.current_input.setEnabled(True)
        self.current_time_input.setEnabled(True)
        self.stroke_input.setEnabled(True)
        self.mount_input.setEnabled(True)


        # Re-enable the start button and disable the stop button
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.test_setup_label.setText(_translate("MainWindow", "Test Setup"))
        self.test_name_label.setText(_translate("MainWindow", "Test Name"))
        self.test_name_input.setPlaceholderText(_translate("MainWindow", "no spaces"))
        self.num_cycles_label.setText(_translate("MainWindow", "# of Cycles"))
        self.cycles_input.setPlaceholderText(_translate("MainWindow", "must be an integer"))
        self.freq_label.setText(_translate("MainWindow", "Measurement Frequency"))
        self.freq_input.setPlaceholderText(_translate("MainWindow", "must be an integer smaller than # of cycles"))
        self.current_label.setText(_translate("MainWindow", "Current (mA)"))
        self.current_input.setPlaceholderText(_translate("MainWindow", "must be an integer"))
        self.current_time_label.setText(_translate("MainWindow", "Current ON Time (sec)"))
        self.stroke_label.setText(_translate("MainWindow", "Stroke Length (mm)"))
        self.stroke_input.setPlaceholderText(_translate("MainWindow", "must be an integer"))
        self.mount_label.setText(_translate("MainWindow", "Mount Thickness (mm)"))
        self.mount_input.setPlaceholderText(_translate("MainWindow", "must be an integer"))
        self.cycle_data_label.setText(_translate("MainWindow", "Cycle Data"))
        self.current_cycle_num_label.setText(_translate("MainWindow", "Cycle Number"))
        self.voltage_label.setText(_translate("MainWindow", "Voltage (V)"))
        self.resistance_label.setText(_translate("MainWindow", "Resistance (Ohm)"))
        self.start_button.setText(_translate("MainWindow", "START Test"))
        self.stop_button.setText(_translate("MainWindow", "STOP Test"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
