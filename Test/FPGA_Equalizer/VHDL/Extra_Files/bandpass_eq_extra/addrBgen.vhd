-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\addrBgen.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: addrBgen
-- Source Path: bandpass_eq/fftAnalysisSynthesis/analysis/fftFrameBuffering/addrBgen
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY addrBgen IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        fftStart                          :   IN    std_logic;
        addrB                             :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        windowIndex                       :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        fftValid                          :   OUT   std_logic
        );
END addrBgen;


ARCHITECTURE rtl OF addrBgen IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT addrBStateMachine
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          start                           :   IN    std_logic;
          fftCountHit                     :   IN    std_logic;
          powerup                         :   OUT   std_logic;
          frameShiftCounterEnable         :   OUT   std_logic;
          fftIndexCounterReset            :   OUT   std_logic;
          fftIndexCounterEnable           :   OUT   std_logic;
          fftValid                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Signals
  SIGNAL count_step                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant1_out1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL fftIndexCounter_out1             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL fftIndexCounterEnable            : std_logic;
  SIGNAL count_1                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL fftIndexCounterReset             : std_logic;
  SIGNAL count_2                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL powerup                          : std_logic;
  SIGNAL frameShiftCounterEnable          : std_logic;
  SIGNAL count_step_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL frameShiftCounter_out1           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_3                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_4                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Add_out1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Switch_out1                      : unsigned(8 DOWNTO 0);  -- ufix9

BEGIN
  -- Shift the frame by FFT/4 samples after every frame.
  -- Count from 0 to FFT size and notify the 
  -- state machine when the count hits FFT size
  -- so that the counter can be reset back to zero.
  -- Add the FFT index counter to 
  -- the frame shift offset
  -- FFT frame start pulse
  -- Make sure that the addrB value won't be reached by the port A
  -- write value after power up or the dual port memory will throw an error.

  u_addrBStateMachine : addrBStateMachine
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              start => fftStart,
              fftCountHit => Delay2_out1,
              powerup => powerup,
              frameShiftCounterEnable => frameShiftCounterEnable,
              fftIndexCounterReset => fftIndexCounterReset,
              fftIndexCounterEnable => fftIndexCounterEnable,
              fftValid => fftValid
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#001#, 9);

  count_reset <= to_unsigned(16#000#, 9);

  Constant1_out1 <= to_unsigned(16#0FE#, 9);

  count <= fftIndexCounter_out1 + count_step;

  
  count_1 <= fftIndexCounter_out1 WHEN fftIndexCounterEnable = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN fftIndexCounterReset = '0' ELSE
      count_reset;

  fftIndexCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fftIndexCounter_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        fftIndexCounter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS fftIndexCounter_process;


  
  Relational_Operator_relop1 <= '1' WHEN fftIndexCounter_out1 >= Constant1_out1 ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay2_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 64
  count_step_1 <= to_unsigned(16#040#, 9);

  count_3 <= frameShiftCounter_out1 + count_step_1;

  
  count_4 <= frameShiftCounter_out1 WHEN frameShiftCounterEnable = '0' ELSE
      count_3;

  frameShiftCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      frameShiftCounter_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        frameShiftCounter_out1 <= count_4;
      END IF;
    END IF;
  END PROCESS frameShiftCounter_process;


  Add_out1 <= frameShiftCounter_out1 + fftIndexCounter_out1;

  Constant_out1 <= to_unsigned(16#140#, 9);

  
  Switch_out1 <= Add_out1 WHEN powerup = '0' ELSE
      Constant_out1;

  addrB <= std_logic_vector(Switch_out1);

  windowIndex <= std_logic_vector(fftIndexCounter_out1);

END rtl;

