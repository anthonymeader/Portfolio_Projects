-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\overlapAdd.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: overlapAdd
-- Source Path: bandpass_eq/fftAnalysisSynthesis/synthesis/overlapAdd
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY overlapAdd IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_1_1                         :   IN    std_logic;
        enb_1_2048_11                     :   IN    std_logic;
        iFFTData                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
        iFFTValid                         :   IN    std_logic;
        fftFramePulse                     :   IN    std_logic;
        audioOut                          :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En23
        );
END overlapAdd;


ARCHITECTURE rtl OF overlapAdd IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT fifoWriteSelect
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          fifoCounter                     :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          validSignal                     :   IN    std_logic;
          valid1                          :   OUT   std_logic;
          valid2                          :   OUT   std_logic;
          valid3                          :   OUT   std_logic;
          valid4                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT fifoStateMachine1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          pop                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FIFO1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En23
          );
  END COMPONENT;

  COMPONENT FIFO2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En23
          );
  END COMPONENT;

  COMPONENT FIFO3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En23
          );
  END COMPONENT;

  COMPONENT FIFO4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En23
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En23
          );
  END COMPONENT;

  -- Constants
  CONSTANT hanningROM_table_data          : vector_of_unsigned24(0 TO 255) := 
    (to_unsigned(16#000273#, 24), to_unsigned(16#0009CA#, 24), to_unsigned(16#001606#, 24),
     to_unsigned(16#002724#, 24), to_unsigned(16#003D21#, 24), to_unsigned(16#0057FB#, 24),
     to_unsigned(16#0077AC#, 24), to_unsigned(16#009C30#, 24), to_unsigned(16#00C582#, 24),
     to_unsigned(16#00F39B#, 24), to_unsigned(16#012675#, 24), to_unsigned(16#015E06#, 24),
     to_unsigned(16#019A48#, 24), to_unsigned(16#01DB30#, 24), to_unsigned(16#0220B5#, 24),
     to_unsigned(16#026ACC#, 24), to_unsigned(16#02B96A#, 24), to_unsigned(16#030C82#, 24),
     to_unsigned(16#036409#, 24), to_unsigned(16#03BFF0#, 24), to_unsigned(16#04202A#, 24),
     to_unsigned(16#0484A7#, 24), to_unsigned(16#04ED5A#, 24), to_unsigned(16#055A30#, 24),
     to_unsigned(16#05CB1A#, 24), to_unsigned(16#064007#, 24), to_unsigned(16#06B8E4#, 24),
     to_unsigned(16#0735A0#, 24), to_unsigned(16#07B626#, 24), to_unsigned(16#083A64#, 24),
     to_unsigned(16#08C245#, 24), to_unsigned(16#094DB5#, 24), to_unsigned(16#09DC9D#, 24),
     to_unsigned(16#0A6EE9#, 24), to_unsigned(16#0B0481#, 24), to_unsigned(16#0B9D4F#, 24),
     to_unsigned(16#0C393C#, 24), to_unsigned(16#0CD82F#, 24), to_unsigned(16#0D7A11#, 24),
     to_unsigned(16#0E1EC8#, 24), to_unsigned(16#0EC63C#, 24), to_unsigned(16#0F7052#, 24),
     to_unsigned(16#101CF1#, 24), to_unsigned(16#10CBFE#, 24), to_unsigned(16#117D5F#, 24),
     to_unsigned(16#1230F8#, 24), to_unsigned(16#12E6AE#, 24), to_unsigned(16#139E65#, 24),
     to_unsigned(16#145802#, 24), to_unsigned(16#151366#, 24), to_unsigned(16#15D077#, 24),
     to_unsigned(16#168F16#, 24), to_unsigned(16#174F28#, 24), to_unsigned(16#18108D#, 24),
     to_unsigned(16#18D32A#, 24), to_unsigned(16#1996E0#, 24), to_unsigned(16#1A5B90#, 24),
     to_unsigned(16#1B211E#, 24), to_unsigned(16#1BE76B#, 24), to_unsigned(16#1CAE58#, 24),
     to_unsigned(16#1D75C7#, 24), to_unsigned(16#1E3D99#, 24), to_unsigned(16#1F05B1#, 24),
     to_unsigned(16#1FCDEE#, 24), to_unsigned(16#209634#, 24), to_unsigned(16#215E62#, 24),
     to_unsigned(16#22265B#, 24), to_unsigned(16#22EDFF#, 24), to_unsigned(16#23B531#, 24),
     to_unsigned(16#247BD2#, 24), to_unsigned(16#2541C2#, 24), to_unsigned(16#2606E5#, 24),
     to_unsigned(16#26CB1C#, 24), to_unsigned(16#278E49#, 24), to_unsigned(16#28504E#, 24),
     to_unsigned(16#29110D#, 24), to_unsigned(16#29D069#, 24), to_unsigned(16#2A8E45#, 24),
     to_unsigned(16#2B4A83#, 24), to_unsigned(16#2C0507#, 24), to_unsigned(16#2CBDB4#, 24),
     to_unsigned(16#2D746F#, 24), to_unsigned(16#2E291A#, 24), to_unsigned(16#2EDB9A#, 24),
     to_unsigned(16#2F8BD4#, 24), to_unsigned(16#3039AE#, 24), to_unsigned(16#30E50C#, 24),
     to_unsigned(16#318DD4#, 24), to_unsigned(16#3233ED#, 24), to_unsigned(16#32D73C#, 24),
     to_unsigned(16#3377AA#, 24), to_unsigned(16#34151D#, 24), to_unsigned(16#34AF7D#, 24),
     to_unsigned(16#3546B3#, 24), to_unsigned(16#35DAA8#, 24), to_unsigned(16#366B45#, 24),
     to_unsigned(16#36F873#, 24), to_unsigned(16#37821E#, 24), to_unsigned(16#380830#, 24),
     to_unsigned(16#388A95#, 24), to_unsigned(16#390939#, 24), to_unsigned(16#398407#, 24),
     to_unsigned(16#39FAEF#, 24), to_unsigned(16#3A6DDC#, 24), to_unsigned(16#3ADCBF#, 24),
     to_unsigned(16#3B4785#, 24), to_unsigned(16#3BAE1F#, 24), to_unsigned(16#3C107C#, 24),
     to_unsigned(16#3C6E8F#, 24), to_unsigned(16#3CC847#, 24), to_unsigned(16#3D1D98#, 24),
     to_unsigned(16#3D6E75#, 24), to_unsigned(16#3DBAD1#, 24), to_unsigned(16#3E02A0#, 24),
     to_unsigned(16#3E45D8#, 24), to_unsigned(16#3E846E#, 24), to_unsigned(16#3EBE59#, 24),
     to_unsigned(16#3EF390#, 24), to_unsigned(16#3F240A#, 24), to_unsigned(16#3F4FC0#, 24),
     to_unsigned(16#3F76AC#, 24), to_unsigned(16#3F98C8#, 24), to_unsigned(16#3FB60D#, 24),
     to_unsigned(16#3FCE79#, 24), to_unsigned(16#3FE207#, 24), to_unsigned(16#3FF0B4#, 24),
     to_unsigned(16#3FFA7E#, 24), to_unsigned(16#3FFF63#, 24), to_unsigned(16#3FFF63#, 24),
     to_unsigned(16#3FFA7E#, 24), to_unsigned(16#3FF0B4#, 24), to_unsigned(16#3FE207#, 24),
     to_unsigned(16#3FCE79#, 24), to_unsigned(16#3FB60D#, 24), to_unsigned(16#3F98C8#, 24),
     to_unsigned(16#3F76AC#, 24), to_unsigned(16#3F4FC0#, 24), to_unsigned(16#3F240A#, 24),
     to_unsigned(16#3EF390#, 24), to_unsigned(16#3EBE59#, 24), to_unsigned(16#3E846E#, 24),
     to_unsigned(16#3E45D8#, 24), to_unsigned(16#3E02A0#, 24), to_unsigned(16#3DBAD1#, 24),
     to_unsigned(16#3D6E75#, 24), to_unsigned(16#3D1D98#, 24), to_unsigned(16#3CC847#, 24),
     to_unsigned(16#3C6E8F#, 24), to_unsigned(16#3C107C#, 24), to_unsigned(16#3BAE1F#, 24),
     to_unsigned(16#3B4785#, 24), to_unsigned(16#3ADCBF#, 24), to_unsigned(16#3A6DDC#, 24),
     to_unsigned(16#39FAEF#, 24), to_unsigned(16#398407#, 24), to_unsigned(16#390939#, 24),
     to_unsigned(16#388A95#, 24), to_unsigned(16#380830#, 24), to_unsigned(16#37821E#, 24),
     to_unsigned(16#36F873#, 24), to_unsigned(16#366B45#, 24), to_unsigned(16#35DAA8#, 24),
     to_unsigned(16#3546B3#, 24), to_unsigned(16#34AF7D#, 24), to_unsigned(16#34151D#, 24),
     to_unsigned(16#3377AA#, 24), to_unsigned(16#32D73C#, 24), to_unsigned(16#3233ED#, 24),
     to_unsigned(16#318DD4#, 24), to_unsigned(16#30E50C#, 24), to_unsigned(16#3039AE#, 24),
     to_unsigned(16#2F8BD4#, 24), to_unsigned(16#2EDB9A#, 24), to_unsigned(16#2E291A#, 24),
     to_unsigned(16#2D746F#, 24), to_unsigned(16#2CBDB4#, 24), to_unsigned(16#2C0507#, 24),
     to_unsigned(16#2B4A83#, 24), to_unsigned(16#2A8E45#, 24), to_unsigned(16#29D069#, 24),
     to_unsigned(16#29110D#, 24), to_unsigned(16#28504E#, 24), to_unsigned(16#278E49#, 24),
     to_unsigned(16#26CB1C#, 24), to_unsigned(16#2606E5#, 24), to_unsigned(16#2541C2#, 24),
     to_unsigned(16#247BD2#, 24), to_unsigned(16#23B531#, 24), to_unsigned(16#22EDFF#, 24),
     to_unsigned(16#22265B#, 24), to_unsigned(16#215E62#, 24), to_unsigned(16#209634#, 24),
     to_unsigned(16#1FCDEE#, 24), to_unsigned(16#1F05B1#, 24), to_unsigned(16#1E3D99#, 24),
     to_unsigned(16#1D75C7#, 24), to_unsigned(16#1CAE58#, 24), to_unsigned(16#1BE76B#, 24),
     to_unsigned(16#1B211E#, 24), to_unsigned(16#1A5B90#, 24), to_unsigned(16#1996E0#, 24),
     to_unsigned(16#18D32A#, 24), to_unsigned(16#18108D#, 24), to_unsigned(16#174F28#, 24),
     to_unsigned(16#168F16#, 24), to_unsigned(16#15D077#, 24), to_unsigned(16#151366#, 24),
     to_unsigned(16#145802#, 24), to_unsigned(16#139E65#, 24), to_unsigned(16#12E6AE#, 24),
     to_unsigned(16#1230F8#, 24), to_unsigned(16#117D5F#, 24), to_unsigned(16#10CBFE#, 24),
     to_unsigned(16#101CF1#, 24), to_unsigned(16#0F7052#, 24), to_unsigned(16#0EC63C#, 24),
     to_unsigned(16#0E1EC8#, 24), to_unsigned(16#0D7A11#, 24), to_unsigned(16#0CD82F#, 24),
     to_unsigned(16#0C393C#, 24), to_unsigned(16#0B9D4F#, 24), to_unsigned(16#0B0481#, 24),
     to_unsigned(16#0A6EE9#, 24), to_unsigned(16#09DC9D#, 24), to_unsigned(16#094DB5#, 24),
     to_unsigned(16#08C245#, 24), to_unsigned(16#083A64#, 24), to_unsigned(16#07B626#, 24),
     to_unsigned(16#0735A0#, 24), to_unsigned(16#06B8E4#, 24), to_unsigned(16#064007#, 24),
     to_unsigned(16#05CB1A#, 24), to_unsigned(16#055A30#, 24), to_unsigned(16#04ED5A#, 24),
     to_unsigned(16#0484A7#, 24), to_unsigned(16#04202A#, 24), to_unsigned(16#03BFF0#, 24),
     to_unsigned(16#036409#, 24), to_unsigned(16#030C82#, 24), to_unsigned(16#02B96A#, 24),
     to_unsigned(16#026ACC#, 24), to_unsigned(16#0220B5#, 24), to_unsigned(16#01DB30#, 24),
     to_unsigned(16#019A48#, 24), to_unsigned(16#015E06#, 24), to_unsigned(16#012675#, 24),
     to_unsigned(16#00F39B#, 24), to_unsigned(16#00C582#, 24), to_unsigned(16#009C30#, 24),
     to_unsigned(16#0077AC#, 24), to_unsigned(16#0057FB#, 24), to_unsigned(16#003D21#, 24),
     to_unsigned(16#002724#, 24), to_unsigned(16#001606#, 24), to_unsigned(16#0009CA#, 24),
     to_unsigned(16#000273#, 24));  -- ufix24 [256]

  -- Signals
  SIGNAL iFFTData_signed                  : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL HwModeRegister_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL iFFTData_1                       : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL count_step                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL delayMatch8_reg                  : vector_of_unsigned9(0 TO 9);  -- ufix9 [10]
  SIGNAL count_step_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL delayMatch9_reg                  : vector_of_unsigned9(0 TO 9);  -- ufix9 [10]
  SIGNAL count_from_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL delayMatch10_reg                 : vector_of_unsigned9(0 TO 9);  -- ufix9 [10]
  SIGNAL count_reset_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL hanningIndex_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_1                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_2                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_3                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL hanningROM_index                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL hanningROM_out1                  : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL hanningROM_out1_1                : unsigned(23 DOWNTO 0) := to_unsigned(16#000000#, 24);  -- ufix24_En22
  SIGNAL hanningROM_out1_2                : unsigned(23 DOWNTO 0);  -- ufix24_En22
  SIGNAL Product_cast                     : signed(24 DOWNTO 0);  -- sfix25_En22
  SIGNAL Product_mul_temp                 : signed(56 DOWNTO 0);  -- sfix57_En45
  SIGNAL Product_cast_1                   : signed(55 DOWNTO 0);  -- sfix56_En45
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Product_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL reduced_reg                      : vector_of_signed32(0 TO 4082);  -- sfix32 [4083]
  SIGNAL Product_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL frameCounter_ctrl_const_out      : std_logic;
  SIGNAL frameCounter_ctrl_delay_out      : std_logic;
  SIGNAL frameCounter_Initial_Val_out     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_step_2                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL frameCounter_out1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_4                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_5                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL frameCounter_out                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL valid1                           : std_logic;
  SIGNAL valid2                           : std_logic;
  SIGNAL valid3                           : std_logic;
  SIGNAL valid4                           : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(0 TO 4085);  -- ufix1 [4086]
  SIGNAL valid1_1                         : std_logic;
  SIGNAL pop                              : std_logic;
  SIGNAL Rate_Transition4_ds_out          : std_logic;
  SIGNAL Rate_Transition4_out1            : std_logic;
  SIGNAL Rate_Transition4_out1_1          : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(0 TO 4085);  -- ufix1 [4086]
  SIGNAL valid2_1                         : std_logic;
  SIGNAL fifoStateMachine2_out1           : std_logic;
  SIGNAL Rate_Transition1_ds_out          : std_logic;
  SIGNAL Rate_Transition1_out1            : std_logic;
  SIGNAL Rate_Transition1_out1_1          : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 4085);  -- ufix1 [4086]
  SIGNAL valid3_1                         : std_logic;
  SIGNAL fifoStateMachine3_out1           : std_logic;
  SIGNAL Rate_Transition2_ds_out          : std_logic;
  SIGNAL Rate_Transition2_out1            : std_logic;
  SIGNAL Rate_Transition2_out1_1          : std_logic;
  SIGNAL delayMatch20_reg                 : std_logic_vector(0 TO 4085);  -- ufix1 [4086]
  SIGNAL valid4_1                         : std_logic;
  SIGNAL fifoStateMachine4_out1           : std_logic;
  SIGNAL Rate_Transition3_ds_out          : std_logic;
  SIGNAL Rate_Transition3_out1            : std_logic;
  SIGNAL Rate_Transition3_out1_1          : std_logic;
  SIGNAL FIFO1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIFO1_out1_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL FIFO2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIFO2_out1_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Add_stage2_add_cast              : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_stage2_add_cast_1            : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_op_stage1                    : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL FIFO3_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIFO3_out1_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Add_stage3_add_cast              : signed(33 DOWNTO 0);  -- sfix34_En23
  SIGNAL Add_stage3_add_cast_1            : signed(33 DOWNTO 0);  -- sfix34_En23
  SIGNAL Add_op_stage2                    : signed(33 DOWNTO 0);  -- sfix34_En23
  SIGNAL FIFO4_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL FIFO4_out1_signed                : signed(31 DOWNTO 0);  -- sfix32_En23
  SIGNAL Add_stage4_add_cast              : signed(33 DOWNTO 0);  -- sfix34_En23
  SIGNAL Add_out1                         : signed(33 DOWNTO 0);  -- sfix34_En23

BEGIN
  u_fifoWriteSelect : fifoWriteSelect
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              fifoCounter => std_logic_vector(frameCounter_out1),  -- ufix2
              validSignal => iFFTValid,
              valid1 => valid1,
              valid2 => valid2,
              valid3 => valid3,
              valid4 => valid4
              );

  u_fifoStateMachine1 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid1,
              pop => pop
              );

  u_fifoStateMachine2 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid2,
              pop => fifoStateMachine2_out1
              );

  u_fifoStateMachine3 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid3,
              pop => fifoStateMachine3_out1
              );

  u_fifoStateMachine4 : fifoStateMachine1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => valid4,
              pop => fifoStateMachine4_out1
              );

  u_FIFO1 : FIFO1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_2),  -- sfix32_En23
              Push => valid1_1,
              Pop => Rate_Transition4_out1_1,
              Out_rsvd => FIFO1_out1  -- sfix32_En23
              );

  u_FIFO2 : FIFO2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_2),  -- sfix32_En23
              Push => valid2_1,
              Pop => Rate_Transition1_out1_1,
              Out_rsvd => FIFO2_out1  -- sfix32_En23
              );

  u_FIFO3 : FIFO3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_2),  -- sfix32_En23
              Push => valid3_1,
              Pop => Rate_Transition2_out1_1,
              Out_rsvd => FIFO3_out1  -- sfix32_En23
              );

  u_FIFO4 : FIFO4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              enb_1_1_1 => enb_1_1_1,
              In_rsvd => std_logic_vector(Product_out1_2),  -- sfix32_En23
              Push => valid4_1,
              Pop => Rate_Transition3_out1_1,
              Out_rsvd => FIFO4_out1  -- sfix32_En23
              );

  iFFTData_signed <= signed(iFFTData);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= iFFTData_signed;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  iFFTData_1 <= HwModeRegister_reg(1);

  stateControl_1 <= '1';

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch11_reg(0) <= stateControl_1;
        delayMatch11_reg(1 TO 9) <= delayMatch11_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  stateControl_2 <= delayMatch11_reg(9);

  Bitwise_Operator_out1 <=  NOT iFFTValid;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 256
  count_step <= to_unsigned(16#001#, 9);

  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch8_reg <= (OTHERS => to_unsigned(16#000#, 9));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch8_reg(0) <= count_step;
        delayMatch8_reg(1 TO 9) <= delayMatch8_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  count_step_1 <= delayMatch8_reg(9);

  count_from <= to_unsigned(16#000#, 9);

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch9_reg <= (OTHERS => to_unsigned(16#000#, 9));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch9_reg(0) <= count_from;
        delayMatch9_reg(1 TO 9) <= delayMatch9_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  count_from_1 <= delayMatch9_reg(9);

  count_reset <= to_unsigned(16#000#, 9);

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg <= (OTHERS => to_unsigned(16#000#, 9));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch10_reg(0) <= count_reset;
        delayMatch10_reg(1 TO 9) <= delayMatch10_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  count_reset_1 <= delayMatch10_reg(9);

  count <= hanningIndex_out1 + count_step_1;

  
  need_to_wrap <= '1' WHEN hanningIndex_out1 = to_unsigned(16#100#, 9) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from_1;

  
  count_1 <= hanningIndex_out1 WHEN iFFTValid = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN Bitwise_Operator_out1 = '0' ELSE
      count_reset_1;

  
  count_3 <= hanningIndex_out1 WHEN stateControl_2 = '0' ELSE
      count_2;

  hanningIndex_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hanningIndex_out1 <= to_unsigned(16#000#, 9);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningIndex_out1 <= count_3;
      END IF;
    END IF;
  END PROCESS hanningIndex_process;


  
  hanningROM_index <= to_signed(16#000000FF#, 32) WHEN hanningIndex_out1 > to_unsigned(16#000000FF#, 9) ELSE
      signed(resize(hanningIndex_out1, 32));
  hanningROM_out1 <= hanningROM_table_data(to_integer(hanningROM_index));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_1 <= hanningROM_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hanningROM_out1_2 <= to_unsigned(16#000000#, 24);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        hanningROM_out1_2 <= hanningROM_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_cast <= signed(resize(hanningROM_out1_2, 25));
  Product_mul_temp <= iFFTData_1 * Product_cast;
  Product_cast_1 <= Product_mul_temp(55 DOWNTO 0);
  Product_out1 <= Product_cast_1(53 DOWNTO 22);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_out1_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_signed(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Product_out1_1;
        reduced_reg(1 TO 4082) <= reduced_reg(0 TO 4081);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Product_out1_2 <= reduced_reg(4082);

  frameCounter_ctrl_const_out <= '1';

  frameCounter_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      frameCounter_ctrl_delay_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        frameCounter_ctrl_delay_out <= frameCounter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS frameCounter_ctrl_delay_process;


  frameCounter_Initial_Val_out <= to_unsigned(16#2#, 2);

  -- Free running, Unsigned Counter
  --  initial value   = 2
  --  step value      = 1
  count_step_2 <= to_unsigned(16#1#, 2);

  count_4 <= frameCounter_out1 + count_step_2;

  
  count_5 <= frameCounter_out1 WHEN fftFramePulse = '0' ELSE
      count_4;

  frameCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      frameCounter_out <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        frameCounter_out <= count_5;
      END IF;
    END IF;
  END PROCESS frameCounter_process;


  
  frameCounter_out1 <= frameCounter_Initial_Val_out WHEN frameCounter_ctrl_delay_out = '0' ELSE
      frameCounter_out;

  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch14_reg(0) <= valid1;
        delayMatch14_reg(1 TO 4085) <= delayMatch14_reg(0 TO 4084);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  valid1_1 <= delayMatch14_reg(4085);

  -- Downsample register
  Rate_Transition4_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_11 = '1' THEN
        Rate_Transition4_ds_out <= pop;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_ds_process;


  -- Downsample output register
  Rate_Transition4_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1 <= Rate_Transition4_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition4_output_process;


  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition4_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition4_out1_1 <= Rate_Transition4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  delayMatch16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch16_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch16_reg(0) <= valid2;
        delayMatch16_reg(1 TO 4085) <= delayMatch16_reg(0 TO 4084);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  valid2_1 <= delayMatch16_reg(4085);

  -- Downsample register
  Rate_Transition1_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_11 = '1' THEN
        Rate_Transition1_ds_out <= fifoStateMachine2_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_ds_process;


  -- Downsample output register
  Rate_Transition1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1 <= Rate_Transition1_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_output_process;


  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition1_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition1_out1_1 <= Rate_Transition1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch18_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch18_reg(0) <= valid3;
        delayMatch18_reg(1 TO 4085) <= delayMatch18_reg(0 TO 4084);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  valid3_1 <= delayMatch18_reg(4085);

  -- Downsample register
  Rate_Transition2_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_11 = '1' THEN
        Rate_Transition2_ds_out <= fifoStateMachine3_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_ds_process;


  -- Downsample output register
  Rate_Transition2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1 <= Rate_Transition2_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_output_process;


  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition2_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition2_out1_1 <= Rate_Transition2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  delayMatch20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch20_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        delayMatch20_reg(0) <= valid4;
        delayMatch20_reg(1 TO 4085) <= delayMatch20_reg(0 TO 4084);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  valid4_1 <= delayMatch20_reg(4085);

  -- Downsample register
  Rate_Transition3_ds_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_ds_out <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_11 = '1' THEN
        Rate_Transition3_ds_out <= fifoStateMachine4_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_ds_process;


  -- Downsample output register
  Rate_Transition3_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1 <= Rate_Transition3_ds_out;
      END IF;
    END IF;
  END PROCESS Rate_Transition3_output_process;


  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Rate_Transition3_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Rate_Transition3_out1_1 <= Rate_Transition3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  FIFO1_out1_signed <= signed(FIFO1_out1);

  FIFO2_out1_signed <= signed(FIFO2_out1);

  Add_stage2_add_cast <= resize(FIFO1_out1_signed, 33);
  Add_stage2_add_cast_1 <= resize(FIFO2_out1_signed, 33);
  Add_op_stage1 <= Add_stage2_add_cast + Add_stage2_add_cast_1;

  FIFO3_out1_signed <= signed(FIFO3_out1);

  Add_stage3_add_cast <= resize(Add_op_stage1, 34);
  Add_stage3_add_cast_1 <= resize(FIFO3_out1_signed, 34);
  Add_op_stage2 <= Add_stage3_add_cast + Add_stage3_add_cast_1;

  FIFO4_out1_signed <= signed(FIFO4_out1);

  Add_stage4_add_cast <= resize(FIFO4_out1_signed, 34);
  Add_out1 <= Add_op_stage2 + Add_stage4_add_cast;

  audioOut <= std_logic_vector(Add_out1);

END rtl;

