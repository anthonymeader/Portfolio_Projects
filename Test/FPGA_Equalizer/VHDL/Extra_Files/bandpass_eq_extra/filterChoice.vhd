-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Antho\Desktop\EELE_468\eq\hdlsrc\bandpass_eq\filterChoice.vhd
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: filterChoice
-- Source Path: bandpass_eq/fftAnalysisSynthesis/frequencyDomainProcessing/applyComplexGains/fftFilterCoefficients/filterChoice
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftAnalysisSynthesis_pkg.ALL;

ENTITY filterChoice IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        gain_1                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_2                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_3                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_4                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        gain_5                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        ROMindex                          :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
        conjugate                         :   IN    std_logic;
        filterCoefficients_re             :   OUT   std_logic_vector(34 DOWNTO 0);  -- sfix35_En22
        filterCoefficients_im             :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En22
        );
END filterChoice;


ARCHITECTURE rtl OF filterChoice IS

  -- Component Declarations
  COMPONENT filter1Coefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ROMindex                        :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          conjugate                       :   IN    std_logic;
          complexCoefficients_re          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          complexCoefficients_im          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  COMPONENT filter2Coefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ROMindex                        :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          conjugate                       :   IN    std_logic;
          complexCoefficients_re          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          complexCoefficients_im          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  COMPONENT filter3Coefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ROMindex                        :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          conjugate                       :   IN    std_logic;
          complexCoefficients_re          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          complexCoefficients_im          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  COMPONENT filter4Coefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ROMindex                        :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          conjugate                       :   IN    std_logic;
          complexCoefficients_re          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          complexCoefficients_im          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  COMPONENT filter5Coefficients
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          ROMindex                        :   IN    std_logic_vector(9 DOWNTO 0);  -- sfix10
          conjugate                       :   IN    std_logic;
          complexCoefficients_re          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
          complexCoefficients_im          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En8
          );
  END COMPONENT;

  -- Signals
  SIGNAL filter1Coefficients_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter1Coefficients_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter1Coefficients_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter1Coefficients_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product_C2ReIm_C2ReIm_A          : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL gain_1_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL reduced_reg                      : vector_of_unsigned16(0 TO 4);  -- ufix16 [5]
  SIGNAL gain_1_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL Product_cast                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product_mul_temp                 : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product_Re                       : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product_Re_1                     : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product_C2ReIm_C2ReIm_B          : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product1_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product_Im                       : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product_Im_1                     : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL filter2Coefficients_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter2Coefficients_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter2Coefficients_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter2Coefficients_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product4_C2ReIm_C2ReIm_A         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL gain_2_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL reduced_reg_1                    : vector_of_unsigned16(0 TO 4);  -- ufix16 [5]
  SIGNAL gain_2_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL Product4_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product4_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product4_Re                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product4_Re_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product4_C2ReIm_C2ReIm_B         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product41_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product41_mul_temp               : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product4_Im                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product4_Im_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Add_stage2_add_cast              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage2_add_cast_1            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage2_add_temp              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage2_add_cast_2            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage2_add_cast_3            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage2_add_temp_1            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_op_stage1_re                 : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Add_op_stage1_im                 : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL filter3Coefficients_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter3Coefficients_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter3Coefficients_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter3Coefficients_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product3_C2ReIm_C2ReIm_A         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL gain_3_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL reduced_reg_2                    : vector_of_unsigned16(0 TO 4);  -- ufix16 [5]
  SIGNAL gain_3_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL Product3_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product3_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product3_Re                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product3_Re_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product3_C2ReIm_C2ReIm_B         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product31_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product31_mul_temp               : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product3_Im                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product3_Im_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Add_stage3_add_cast              : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL Add_stage3_add_cast_1            : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL Add_stage3_add_cast_2            : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL Add_stage3_add_cast_3            : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL Add_op_stage2_re                 : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL Add_op_stage2_im                 : signed(33 DOWNTO 0);  -- sfix34_En22
  SIGNAL filter4Coefficients_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter4Coefficients_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter4Coefficients_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter4Coefficients_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product2_C2ReIm_C2ReIm_A         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL gain_4_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL reduced_reg_3                    : vector_of_unsigned16(0 TO 4);  -- ufix16 [5]
  SIGNAL gain_4_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL Product2_cast                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product2_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product2_Re                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product2_Re_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product2_C2ReIm_C2ReIm_B         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product21_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product21_mul_temp               : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product2_Im                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product2_Im_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Add_stage4_add_cast              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage4_add_cast_1            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage4_add_cast_2            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage4_add_cast_3            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_op_stage3_re                 : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_op_stage3_im                 : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL filter5Coefficients_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter5Coefficients_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL filter5Coefficients_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL filter5Coefficients_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product1_C2ReIm_C2ReIm_A         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL gain_5_unsigned                  : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL reduced_reg_4                    : vector_of_unsigned16(0 TO 4);  -- ufix16 [5]
  SIGNAL gain_5_1                         : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL Product11_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product11_mul_temp               : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product1_Re                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product1_Re_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product1_C2ReIm_C2ReIm_B         : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product12_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Product12_mul_temp               : signed(32 DOWNTO 0);  -- sfix33_En22
  SIGNAL Product1_Im                      : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Product1_Im_1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Add_stage5_add_cast              : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_stage5_add_cast_1            : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_out1_re                      : signed(34 DOWNTO 0);  -- sfix35_En22
  SIGNAL Add_out1_im                      : signed(34 DOWNTO 0);  -- sfix35_En22

  ATTRIBUTE multstyle : string;

BEGIN
  u_filter1Coefficients : filter1Coefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ROMindex => ROMindex,  -- sfix10
              conjugate => conjugate,
              complexCoefficients_re => filter1Coefficients_out1_re,  -- sfix16_En8
              complexCoefficients_im => filter1Coefficients_out1_im  -- sfix16_En8
              );

  u_filter2Coefficients : filter2Coefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ROMindex => ROMindex,  -- sfix10
              conjugate => conjugate,
              complexCoefficients_re => filter2Coefficients_out1_re,  -- sfix16_En8
              complexCoefficients_im => filter2Coefficients_out1_im  -- sfix16_En8
              );

  u_filter3Coefficients : filter3Coefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ROMindex => ROMindex,  -- sfix10
              conjugate => conjugate,
              complexCoefficients_re => filter3Coefficients_out1_re,  -- sfix16_En8
              complexCoefficients_im => filter3Coefficients_out1_im  -- sfix16_En8
              );

  u_filter4Coefficients : filter4Coefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ROMindex => ROMindex,  -- sfix10
              conjugate => conjugate,
              complexCoefficients_re => filter4Coefficients_out1_re,  -- sfix16_En8
              complexCoefficients_im => filter4Coefficients_out1_im  -- sfix16_En8
              );

  u_filter5Coefficients : filter5Coefficients
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              ROMindex => ROMindex,  -- sfix10
              conjugate => conjugate,
              complexCoefficients_re => filter5Coefficients_out1_re,  -- sfix16_En8
              complexCoefficients_im => filter5Coefficients_out1_im  -- sfix16_En8
              );

  filter1Coefficients_out1_re_signed <= signed(filter1Coefficients_out1_re);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_C2ReIm_A <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_C2ReIm_C2ReIm_A <= filter1Coefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  gain_1_unsigned <= unsigned(gain_1);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg(0) <= gain_1_unsigned;
        reduced_reg(1 TO 4) <= reduced_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_process;

  gain_1_1 <= reduced_reg(4);

  Product_cast <= signed(resize(gain_1_1, 17));
  Product_mul_temp <= Product_C2ReIm_C2ReIm_A * Product_cast;
  Product_Re <= Product_mul_temp(31 DOWNTO 0);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Re_1 <= Product_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  filter1Coefficients_out1_im_signed <= signed(filter1Coefficients_out1_im);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_C2ReIm_C2ReIm_B <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_C2ReIm_C2ReIm_B <= filter1Coefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Product1_cast <= signed(resize(gain_1_1, 17));
  Product1_mul_temp <= Product_C2ReIm_C2ReIm_B * Product1_cast;
  Product_Im <= Product1_mul_temp(31 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product_Im_1 <= Product_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  filter2Coefficients_out1_re_signed <= signed(filter2Coefficients_out1_re);

  HwModeRegister16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_C2ReIm_C2ReIm_A <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product4_C2ReIm_C2ReIm_A <= filter2Coefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister16_process;


  gain_2_unsigned <= unsigned(gain_2);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_1 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_1(0) <= gain_2_unsigned;
        reduced_reg_1(1 TO 4) <= reduced_reg_1(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  gain_2_1 <= reduced_reg_1(4);

  Product4_cast <= signed(resize(gain_2_1, 17));
  Product4_mul_temp <= Product4_C2ReIm_C2ReIm_A * Product4_cast;
  Product4_Re <= Product4_mul_temp(31 DOWNTO 0);

  PipelineRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_Re_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product4_Re_1 <= Product4_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister8_process;


  filter2Coefficients_out1_im_signed <= signed(filter2Coefficients_out1_im);

  HwModeRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_C2ReIm_C2ReIm_B <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product4_C2ReIm_C2ReIm_B <= filter2Coefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister18_process;


  Product41_cast <= signed(resize(gain_2_1, 17));
  Product41_mul_temp <= Product4_C2ReIm_C2ReIm_B * Product41_cast;
  Product4_Im <= Product41_mul_temp(31 DOWNTO 0);

  PipelineRegister9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_Im_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product4_Im_1 <= Product4_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister9_process;


  Add_stage2_add_cast <= resize(Product_Re_1, 35);
  Add_stage2_add_cast_1 <= resize(Product4_Re_1, 35);
  Add_stage2_add_temp <= Add_stage2_add_cast + Add_stage2_add_cast_1;
  Add_op_stage1_re <= Add_stage2_add_temp(32 DOWNTO 0);
  Add_stage2_add_cast_2 <= resize(Product_Im_1, 35);
  Add_stage2_add_cast_3 <= resize(Product4_Im_1, 35);
  Add_stage2_add_temp_1 <= Add_stage2_add_cast_2 + Add_stage2_add_cast_3;
  Add_op_stage1_im <= Add_stage2_add_temp_1(32 DOWNTO 0);

  filter3Coefficients_out1_re_signed <= signed(filter3Coefficients_out1_re);

  HwModeRegister12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_C2ReIm_C2ReIm_A <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product3_C2ReIm_C2ReIm_A <= filter3Coefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;


  gain_3_unsigned <= unsigned(gain_3);

  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_2 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_2(0) <= gain_3_unsigned;
        reduced_reg_2(1 TO 4) <= reduced_reg_2(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  gain_3_1 <= reduced_reg_2(4);

  Product3_cast <= signed(resize(gain_3_1, 17));
  Product3_mul_temp <= Product3_C2ReIm_C2ReIm_A * Product3_cast;
  Product3_Re <= Product3_mul_temp(31 DOWNTO 0);

  PipelineRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_Re_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product3_Re_1 <= Product3_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister6_process;


  filter3Coefficients_out1_im_signed <= signed(filter3Coefficients_out1_im);

  HwModeRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_C2ReIm_C2ReIm_B <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product3_C2ReIm_C2ReIm_B <= filter3Coefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister14_process;


  Product31_cast <= signed(resize(gain_3_1, 17));
  Product31_mul_temp <= Product3_C2ReIm_C2ReIm_B * Product31_cast;
  Product3_Im <= Product31_mul_temp(31 DOWNTO 0);

  PipelineRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product3_Im_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product3_Im_1 <= Product3_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister7_process;


  Add_stage3_add_cast <= resize(Add_op_stage1_re, 34);
  Add_stage3_add_cast_1 <= resize(Product3_Re_1, 34);
  Add_op_stage2_re <= Add_stage3_add_cast + Add_stage3_add_cast_1;
  Add_stage3_add_cast_2 <= resize(Add_op_stage1_im, 34);
  Add_stage3_add_cast_3 <= resize(Product3_Im_1, 34);
  Add_op_stage2_im <= Add_stage3_add_cast_2 + Add_stage3_add_cast_3;

  filter4Coefficients_out1_re_signed <= signed(filter4Coefficients_out1_re);

  HwModeRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_C2ReIm_C2ReIm_A <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product2_C2ReIm_C2ReIm_A <= filter4Coefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  gain_4_unsigned <= unsigned(gain_4);

  reduced_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_3 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_3(0) <= gain_4_unsigned;
        reduced_reg_3(1 TO 4) <= reduced_reg_3(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  gain_4_1 <= reduced_reg_3(4);

  Product2_cast <= signed(resize(gain_4_1, 17));
  Product2_mul_temp <= Product2_C2ReIm_C2ReIm_A * Product2_cast;
  Product2_Re <= Product2_mul_temp(31 DOWNTO 0);

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_Re_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product2_Re_1 <= Product2_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  filter4Coefficients_out1_im_signed <= signed(filter4Coefficients_out1_im);

  HwModeRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_C2ReIm_C2ReIm_B <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product2_C2ReIm_C2ReIm_B <= filter4Coefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;


  Product21_cast <= signed(resize(gain_4_1, 17));
  Product21_mul_temp <= Product2_C2ReIm_C2ReIm_B * Product21_cast;
  Product2_Im <= Product21_mul_temp(31 DOWNTO 0);

  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_Im_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product2_Im_1 <= Product2_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  Add_stage4_add_cast <= resize(Add_op_stage2_re, 35);
  Add_stage4_add_cast_1 <= resize(Product2_Re_1, 35);
  Add_op_stage3_re <= Add_stage4_add_cast + Add_stage4_add_cast_1;
  Add_stage4_add_cast_2 <= resize(Add_op_stage2_im, 35);
  Add_stage4_add_cast_3 <= resize(Product2_Im_1, 35);
  Add_op_stage3_im <= Add_stage4_add_cast_2 + Add_stage4_add_cast_3;

  filter5Coefficients_out1_re_signed <= signed(filter5Coefficients_out1_re);

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_C2ReIm_A <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_C2ReIm_A <= filter5Coefficients_out1_re_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  gain_5_unsigned <= unsigned(gain_5);

  reduced_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg_4 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        reduced_reg_4(0) <= gain_5_unsigned;
        reduced_reg_4(1 TO 4) <= reduced_reg_4(0 TO 3);
      END IF;
    END IF;
  END PROCESS reduced_4_process;

  gain_5_1 <= reduced_reg_4(4);

  Product11_cast <= signed(resize(gain_5_1, 17));
  Product11_mul_temp <= Product1_C2ReIm_C2ReIm_A * Product11_cast;
  Product1_Re <= Product11_mul_temp(31 DOWNTO 0);

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_Re_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_Re_1 <= Product1_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  filter5Coefficients_out1_im_signed <= signed(filter5Coefficients_out1_im);

  HwModeRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_C2ReIm_B <= to_signed(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_C2ReIm_B <= filter5Coefficients_out1_im_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  Product12_cast <= signed(resize(gain_5_1, 17));
  Product12_mul_temp <= Product1_C2ReIm_C2ReIm_B * Product12_cast;
  Product1_Im <= Product12_mul_temp(31 DOWNTO 0);

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_Im_1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_Im_1 <= Product1_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Add_stage5_add_cast <= resize(Product1_Re_1, 35);
  Add_out1_re <= Add_op_stage3_re + Add_stage5_add_cast;
  Add_stage5_add_cast_1 <= resize(Product1_Im_1, 35);
  Add_out1_im <= Add_op_stage3_im + Add_stage5_add_cast_1;

  filterCoefficients_re <= std_logic_vector(Add_out1_re);

  filterCoefficients_im <= std_logic_vector(Add_out1_im);

END rtl;

